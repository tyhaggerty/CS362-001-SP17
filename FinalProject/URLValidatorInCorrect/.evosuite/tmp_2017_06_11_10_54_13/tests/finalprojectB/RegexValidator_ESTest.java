/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 11 17:58:10 GMT 2017
 */

package finalprojectB;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import finalprojectB.RegexValidator;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegexValidator_ESTest extends RegexValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "}";
      stringArray0[1] = "RegexValidator{";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 13
         // RegexValidator{
         //              ^
         //
         assertThrownBy("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S%pPzOg[NNzkO?i";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // S%pPzOg[NNzkO?i
         //               ^
         //
         assertThrownBy("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("Regular expression[", true);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // Regular expression[
         //                   ^
         //
         assertThrownBy("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G61@1w!Xvyi";
      stringArray0[1] = "";
      stringArray0[2] = "finalprojectB.RegexValidator";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String string0 = regexValidator0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("D=dx;f=iNqO^\" -'");
      String string0 = regexValidator0.validate("D=dx;f=iNqO^\" -'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("Regular expressions are missing");
      String string0 = regexValidator0.validate((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G61@1w!Xvyi";
      stringArray0[1] = "";
      stringArray0[2] = "finalprojectB.RegexValidator";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String string0 = regexValidator0.validate("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("D=dx;f=iNqO^\" -'");
      String[] stringArray0 = regexValidator0.match("D=dx;f=iNqO^\" -'");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("}GEK/9", false);
      String[] stringArray0 = regexValidator0.match((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G61@1w!Xvyi";
      stringArray0[1] = "";
      stringArray0[2] = "finalprojectB.RegexValidator";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0, false);
      String[] stringArray1 = regexValidator0.match("finalprojectB.RegexValidator");
      RegexValidator regexValidator1 = null;
      try {
        regexValidator1 = new RegexValidator(stringArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "aG61@1w!Xvyi";
      stringArray0[1] = "aG61@1w!Xvyi";
      stringArray0[2] = "aG61@1w!Xvyi";
      stringArray0[3] = "aG61@1w!Xvyi";
      stringArray0[4] = "aG61@1w!Xvyi";
      stringArray0[5] = "aG61@1w!Xvyi";
      RegexValidator regexValidator0 = new RegexValidator(stringArray0);
      boolean boolean0 = regexValidator0.isValid("aG61@1w!Xvyi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("Regular expressions are missing");
      boolean boolean0 = regexValidator0.isValid((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[3];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expression[0] is missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator((String[]) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegexValidator regexValidator0 = new RegexValidator("D=dx;f=iNqO^\" -'");
      boolean boolean0 = regexValidator0.isValid("D=dx;f=iNqO^\" -'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator("c?9FT K+zt(KxBTl#m");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // c?9FT K+zt(KxBTl#m
         //                   ^
         //
         assertThrownBy("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RegexValidator regexValidator0 = null;
      try {
        regexValidator0 = new RegexValidator(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Regular expressions are missing
         //
         assertThrownBy("finalprojectB.RegexValidator", e);
      }
  }
}
